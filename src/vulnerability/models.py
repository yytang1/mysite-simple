from django.db import models
from django.db.models.fields.related import ForeignKey
from django.template.defaultfilters import default

# Create your models here.    
    
class CVE(models.Model):
    cve_id = models.CharField(max_length=20, primary_key=True, db_column='CVEID')
    cwe_id = models.CharField(max_length=30, db_column='CWEID', blank=True, null=True)
    cvss_id = models.FloatField(db_column='CVSS')
    description = models.TextField(db_column='Description')
    user = models.CharField(max_length=20, db_column='User')
    update_date = models.DateField(blank=True, auto_now=True)   
    publish_date = models.DateField(blank=True, null=True)
    exploits = models.IntegerField(null=True, blank=True)
    
    def __str__(self):
        return self.cve_id
    class Meta:
        db_table = 'vulnerability_cve'
    
class INFO(models.Model):
    id = models.AutoField('ID', primary_key=True)
    cve = ForeignKey(CVE, related_name='cve')
    software = models.TextField(db_column='Software')
    software_version = models.TextField(db_column='SoftwareVersion')
    vuln_file = models.CharField(max_length=255, db_column='vuln_File', blank=True, null=True)
    vuln_func = models.TextField(db_column='vuln_Func', blank=True, null=True)
    contain_version = models.TextField(db_column='Contain_Version', blank=True, null=True)
    version_used = models.CharField(max_length=20, blank=True, db_column='Version_Used', null=True)
    error_version = models.TextField(db_column='Error_Version', blank=True, null=True)
    reuse_version = models.TextField(db_column='Reuse_Version', blank=True, null=True)
    diff_link = models.TextField(db_column='Diff_Link', null=True, blank=True)
    diff_file = models.CharField(max_length=100, db_column='Diff_File', blank=True, null=True)
    feature = models.TextField(null=True, blank=True)
    publish_date = models.DateField(blank=True, null=True)
    author = models.CharField(max_length=50, null=True)
    check_flag = models.BooleanField(db_column='Check_Flag', default=False)
    hasPatch = models.BooleanField(db_column='HasPatch', default=False)
    hasReuse = models.BooleanField(db_column='HasReuse', default=False)
    vuln_type = models.FloatField(db_column='TYPE', blank=True, null=True)
    
    def __str__(self):
        return  str(self.id) + str(self.cve) + '_' + str(self.software)
    class Meta:
        db_table = 'vulnerability_info'
    
class FUNC(models.Model):
    id = models.AutoField('ID', primary_key=True)
    info_id = models.ForeignKey(INFO) 
    patch_file = models.CharField(max_length=255, null=True)   
    patch_func = models.CharField(max_length=63, null=True)        
    func_code = models.CharField(max_length=20, db_column='Func_Code', null=True)
    feature = models.TextField(null=True, blank=True)    
    def __str__(self):
        return self.info_id.__str__() + " : " + self.vuln_file + " : " + self.vuln_func
    
class CVSS(models.Model):
    cveid = models.OneToOneField(CVE)
    version = models.CharField(max_length=20, null=True)
    baseScore = models.FloatField(null=True)
    impactSubscore = models.FloatField(null=True)
    exploitabilitySubscore = models.FloatField(null=True)
    accessVector = models.CharField(max_length=1, null=True)
    accessComplexity = models.CharField(max_length=1, null=True)
    authentication = models.CharField(max_length=1, null=True)
    confidentialImpact = models.CharField(max_length=1, null=True)
    integrityImpact = models.CharField(max_length=1, null=True)
    avalibilityImpact = models.CharField(max_length=1, null=True)
    severity = models.CharField(max_length=1, null=True)
    def __str__(self):
        return self.cveid.__str__() + "_" + str(self.baseScore)
    
class EXPLOIT(models.Model):
    id = models.AutoField('id', primary_key=True)
    cve = ForeignKey(CVE)
    edb_id = models.CharField(max_length=20)
    link = models.TextField(null=True)
    down_link = models.TextField(null=True)
    code = models.CharField(max_length=50, null=True)
    author = models.CharField(max_length=50, null=True)
    publish_date = models.DateField(null=True)
    check_flag = models.BooleanField(default=False)
    
    def __str__(self):
        return str(self.id) + "_" + self.cve.__str__() + "_" + self.edb_id

class REUSE(models.Model):
    info_id = models.ForeignKey(INFO)
    patch_func = models.CharField(max_length=63, null=True) 
    patch_file = models.CharField(max_length=255, null=True)   
    version = models.CharField(max_length=20, null=True)
    code = models.TextField(null=True)
    feature = models.TextField(null=True, blank=True)
    author = models.CharField(max_length=50, null=True)
    class Meta:
        unique_together = ("info_id", "patch_func", "version")
        
    def __str__(self):
        return self.info_id.__str__() + '_' + self.patch_func + '_' + self.version
    
class FEATURE(models.Model):
    id = models.CharField(max_length=20, primary_key=True)
    feature = models.TextField()
    def __str__(self):
        return self.id + self.feature
    
class DIFFFEATURE(models.Model):
    info_id = models.ForeignKey(INFO)
    number = models.IntegerField()
    feature = models.ForeignKey(FEATURE)
    class Meta:
        unique_together = ("info_id", "number", "feature")
    def __str__(self):
        return self.info_id.__str__() + "_" + str(self.number) + self.feature.__str__()
    
class REUSEFEATURE(models.Model):
    id = models.AutoField('id', primary_key=True)
    reuse = models.ForeignKey(REUSE)
    feature = models.ForeignKey(FEATURE)
    def __str__(self):
        return self.reuse.__str__() + "_" + self.feature.__str__()
